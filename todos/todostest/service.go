// Code generated by mockery v2.0.0. DO NOT EDIT.

package todostest

import (
	context "context"

	rel "github.com/Fs02/rel"
	mock "github.com/stretchr/testify/mock"

	todos "github.com/Fs02/go-todo-backend/todos"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Clear provides a mock function with given fields: ctx
func (_m *Service) Clear(ctx context.Context) {
	_m.Called(ctx)
}

// Create provides a mock function with given fields: ctx, todo
func (_m *Service) Create(ctx context.Context, todo *todos.Todo) error {
	ret := _m.Called(ctx, todo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *todos.Todo) error); ok {
		r0 = rf(ctx, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, todo
func (_m *Service) Delete(ctx context.Context, todo *todos.Todo) {
	_m.Called(ctx, todo)
}

// Search provides a mock function with given fields: ctx, _a1, filter
func (_m *Service) Search(ctx context.Context, _a1 *[]todos.Todo, filter todos.Filter) error {
	ret := _m.Called(ctx, _a1, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]todos.Todo, todos.Filter) error); ok {
		r0 = rf(ctx, _a1, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, todo, changes
func (_m *Service) Update(ctx context.Context, todo *todos.Todo, changes rel.Changeset) error {
	ret := _m.Called(ctx, todo, changes)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *todos.Todo, rel.Changeset) error); ok {
		r0 = rf(ctx, todo, changes)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
